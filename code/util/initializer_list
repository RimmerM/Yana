#pragma once

#include "types.h"

namespace std {
#ifdef __GNUC__
template<typename T> struct initializer_list
{
    typedef T type;
#ifdef __X64__
    #ifdef __WINDOWS__
        typedef unsigned long long Size;
#else //__WINDOWS__
        typedef unsigned long Size;
#endif //__WINDOWS__
#else //__X64__
    typedef unsigned int Size;
#endif //__X64__

    initializer_list() = default;
    initializer_list(const type* first, Size size) :
        mFirst(first),
        mSize(size)
    {}

    const type* begin() const {
        return mFirst;
    }
    const type* end() const {
        return mFirst + mSize;
    }
    Size size() const {
        return mSize;
    }
private:
    const type* mFirst = 0;
    Size mSize = 0;
};
#elif defined(_MSC_VER)
template<typename T> struct initializer_list
	{
		typedef T type;

		initializer_list() = default;
		initializer_list(const type* first, const type* last) :
			mFirst(first),
			mLast(last)
		{}

		const type* begin() const {
			return mFirst;
		}
		const type* end() const {
			return mLast;
		}
		auto size() const {
			return mLast - mFirst;
		}
	private:
		const type* mFirst = 0, *mLast = 0;
	};
#endif
}