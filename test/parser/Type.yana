-- ConType.
alias X = Y
alias X = Y(Z)
alias X = Y(Z(W))
alias X = Y Z
alias X = Y(Z, W)
alias X = Y(a)
alias X = Y(a(b))
alias X = Y a
alias X = Y {Y, W}
alias X = Y {a: Z, b: W}
alias X = Y [Z]
alias X = Y [Z => W]
alias X = Y [a => b]
alias X = Y [Z(W)]
alias X = Y [Z(a)]

-- GenType.
alias X = a
alias X = a(Z)
alias X = a(Z(W))
alias X = a Z
alias X = a(Z, W)
alias X = a(b)
alias X = a(b(c))
alias X = a b
alias X = a {Y, W}
alias X = a {a: Z, b: W}
alias X = a [Z]
alias X = a [Z => W]
alias X = a [b => c]
alias X = a [Z(W)]
alias X = a [Z(b)]

-- Tuples.
alias X = {Y}
alias X = {Z, W}
alias X = {[Y]}
alias X = {[Y], {Z, W}}
alias X = {a: Int, b: Int, c: Int, d: Int}
alias X = {a: [Y]}
alias X = {a: [Y], b: {x: Int, y: Int}}

-- PtrType.
alias X = %X
alias X = %[Int]
alias X = %{Int, Int}
alias X = %(() -> Int)
alias X = %(Int)
alias X = %(%Int)
alias X = %(&Int)
alias X = %(&(*Int))
alias X = %(&Int)
alias X = %(%Int)
alias X = %(&[Int])

-- RefType.
alias X = &X
alias X = &[Int]
alias X = &{Int, Int}
alias X = &(() -> Int)
alias X = &(Int)
alias X = &(&Int)
alias X = &(%Int)
alias X = &(%(*Int))
alias X = &(%Int)
alias X = &(&Int)
alias X = &(%[Int])

-- ValType.
alias X = *X
alias X = *[Int]
alias X = *{Int, Int}
alias X = *(() -> Int)
alias X = *(Int)
alias X = *(*Int)
alias X = *(&Int)
alias X = *(&(%Int))
alias X = *(%Int)
alias X = *(*Int)
alias X = *(&[Int])

-- Arrays.
alias X = [Y]
alias X = [a]
alias X = [{x: Int, y: Int}]
alias X = [[a]]
alias X = [[[[Int => Int]]]]
alias X = [Y => Z]
alias X = [a => Z]
alias X = [Y => a]
alias X = [{x: Int, y: Int} => Y(Z(W))]
alias X = [{Int, Int} => {Int, Int}]

-- Function types.
alias X = () -> {}
alias X = (Int) -> {}
alias X = (Int) -> Int
alias X = (Int, Bool) -> Int
alias X = (Int, Bool) -> {Int, Bool}
alias X = (a: Int, b: Bool) -> {a: Int, b: Bool}
alias X = (a: a, b: a) -> [a]
alias X = (a: [a], b: [a => a]) -> Set(Bool)
alias X = (a: Module.Type) -> Module.Type({Bool, Bool})

-- Parenthesized.
alias X = (Int)
alias X = (Module.Int)
alias X = ({ [X], [Y], [Z] })
alias X = ([a])
alias X = ({ x: [X], y: Module.Type, z: { Type } })

-- Mutable types.
alias X = { x: &Int, y: &[Int], z: &{Int, {Int, Int}} }
alias X = [&Int]
alias X = Y(&Int)

-- Flattened types.
alias X = { x: *Int, y: *[Int], z: *{*Int, *{Int, Int}} }
alias X = [*[*[Int => *{a, b}]]]
alias X = Y(*Z)
