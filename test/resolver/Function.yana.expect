
fn e(%a: i32, %b: i32) -> i32 {
#0:
  %0 = add(%a, %b): i32
  ret(%0): i32
}

fn g(%a: i32) -> void {
#0:
  %a = alloc<mut>(): *i32
  store(%a, %a): void
  store(%a, 2: i32): void
  ret(): void
}

fn d(%a: i32, %b: i32) -> i32 {
#0:
  %0 = add(%a, %b): i32
  ret(%0): i32
}

fn b(%a: i32) -> void {
#0:
  ret(): void
}

fn f(%a: *i32) -> void {
#0:
  store(%a, 1: i32): void
  ret(): void
}

fn h() -> i32 {
#0:
  %0 = call(d, 1: i32, 2: i32): i32
  %1 = call(e, 3: i32, 4: i32): i32
  %2 = mul(%0, %1): i32
  ret(%2): i32
}

fn c(%a: i32, %b: i32) -> void {
#0:
  ret(): void
}

fn a() -> void {
#0:
  ret(): void
}

