
fn e['0](%v: E(i32, '0, i32)) -> i32 {
#0:
  %0 = getfield(%v, 1, 2): A(i32)
  jmp(#1): void
#1:
  %1 = getfield(%0, 1): i32
  %3 = getfield(%v, 1, 0): i32
  %4 = mul(%3, %1): i32
  ret(%4): i32
}

fn cf() -> F {
#0:
  %0 = tup(9.5: f32, 8.5: f32, 1: i32): {f32, f32, i32}
  %1 = record(C, %0): C(f32)
  %2 = record(A, %1): A(C(f32))
  %3 = call(ca): A(i32)
  %4 = call(ca): A(i32)
  %5 = record(D, %4): D(A(i32), B(i1), C(f32))
  %6 = tup(%3, %5, %2): {A(i32), D(A(i32), B(i1), C(f32)), A(C(f32))}
  %7 = record(E, %6): E(A(i32), B(i1), C(f32))
  %8 = record(F, %7): F
  ret(%8): F
}

fn d(%v: D(i32, i32, i32)) -> i32 {
#0:
  jmp(#1): void
#1:
  %0 = getfield(%v, 1): i32
  ret(%0): i32
}

fn ci() -> D(A(i32), void, void) {
#0:
  %0 = record(A, 0: i32): A(i32)
  %1 = record(D, %0): D(A(i32), void, void)
  ret(%1): D(A(i32), void, void)
}

fn cl() -> L(i32) {
#0:
  %0 = tup(2: i32, 3: i32): {i32, i32}
  %1 = record(B, %0): B(i32)
  %2 = record(D, 4: i32): D(i32, void, void)
  %3 = tup(%1, %2): {B(i32), D(i32, void, void)}
  %4 = record(L, %3): L(i32)
  ret(%4): L(i32)
}

fn length['0](%list: List('0)) -> i32 {
#0:
  %2 = getfield(%list, 0): i32
  %3 = icmp(%2, 0: i32): i1
  je([%3, #1, #2]): void
#1:
  %0 = getfield(%list, 1): {'0, List('0)}
  %1 = getfield(%0, 1): List('0)
  %5 = call(length, %1): i32
  %6 = add(1: i32, %5): i32
  jmp(#3): void
#2:
  jmp(#3): void
#3:
  %9 = phi([%6, #1], [0: i32, #2]): i32
  ret(%9): i32
}

fn ca() -> A(i32) {
#0:
  %0 = record(A, 0: i32): A(i32)
  ret(%0): A(i32)
}

fn intLength(%list: List(i32)) -> i32 {
#0:
  %2 = getfield(%list, 0): i32
  %3 = icmp(%2, 0: i32): i1
  je([%3, #1, #2]): void
#1:
  %0 = getfield(%list, 1): {i32, List(i32)}
  %1 = getfield(%0, 1): List(i32)
  %5 = call(intLength, %1): i32
  %6 = add(1: i32, %5): i32
  jmp(#3): void
#2:
  jmp(#3): void
#3:
  %9 = phi([%6, #1], [0: i32, #2]): i32
  ret(%9): i32
}

fn cg() -> G(D(i32, void, void), A(C(i32)), B(A(i1))) {
#0:
  %0 = call(cd): D(i32, void, void)
  %1 = record(G, %0): G(D(i32, void, void), A(C(i32)), B(A(i1)))
  ret(%1): G(D(i32, void, void), A(C(i32)), B(A(i1)))
}

fn b(%v: B(i32)) -> i32 {
#0:
  %0 = getfield(%v, 1, 0): i32
  ret(%0): i32
}

fn ck() -> K {
#0:
  %0 = record(D, 0: i32): D(i32, i32, D(A(i32), void, void))
  %1 = call(ci): D(A(i32), void, void)
  %2 = tup(0: i32, %0, %1): {i32, D(i32, i32, D(A(i32), void, void)), A(D(A(i32), void, void))}
  %3 = record(E, %2): E(i32, i32, D(A(i32), void, void))
  %4 = record(D, 0: f32): D(f32, f32, D(A(i32), void, void))
  %5 = call(ci): D(A(i32), void, void)
  %6 = tup(0: f32, %4, %5): {f32, D(f32, f32, D(A(i32), void, void)), A(D(A(i32), void, void))}
  %7 = record(E, %6): E(f32, f32, D(A(i32), void, void))
  %8 = tup(%3, %7): {E(i32, i32, D(A(i32), void, void)), E(f32, f32, D(A(i32), void, void))}
  %9 = record(K, %8): K
  ret(%9): K
}

fn !!['0](%list: List('0), %index: i32) -> Maybe('0) {
#0:
  %0 = tup(%list, %index): {List('0), i32}
  %1 = getfield(%0, 0): List('0)
  %4 = getfield(%1, 0): i32
  %5 = icmp(%4, 0: i32): i1
  je([%5, #1, #3]): void
#1:
  %2 = getfield(%1, 1): {'0, List('0)}
  %3 = getfield(%2, 0): '0
  %7 = getfield(%0, 1): i32
  %8 = icmp(%7, 0: i32): i1
  je([%8, #2, #3]): void
#2:
  %10 = record(Just, %3): Maybe('0)
  jmp(#6): void
#3:
  %11 = getfield(%0, 0): List('0)
  %14 = getfield(%11, 0): i32
  %15 = icmp(%14, 0: i32): i1
  je([%15, #4, #5]): void
#4:
  %12 = getfield(%11, 1): {'0, List('0)}
  %13 = getfield(%12, 1): List('0)
  %17 = getfield(%0, 1): i32
  %18 = sub(%index, 1: i32): i32
  %19 = call(!!, %13, %18): Maybe('0)
  jmp(#6): void
#5:
  %20 = getfield(%0, 0): List('0)
  %21 = getfield(%0, 1): i32
  %22 = record(Nothing): Maybe('0)
  jmp(#6): void
#6:
  %26 = phi([%10, #2], [%19, #4], [%22, #5]): Maybe('0)
  ret(%26): Maybe('0)
}

fn cj() -> E(i32, i1, D(A(i32), void, void)) {
#0:
  %0 = record(D, 0: i32): D(i32, i1, D(A(i32), void, void))
  %1 = call(ci): D(A(i32), void, void)
  %2 = tup(0: i32, %0, %1): {i32, D(i32, i1, D(A(i32), void, void)), A(D(A(i32), void, void))}
  %3 = record(E, %2): E(i32, i1, D(A(i32), void, void))
  ret(%3): E(i32, i1, D(A(i32), void, void))
}

fn cb() -> B(f64) {
#0:
  %0 = tup(0: f64, 1.1: f64): {f64, f64}
  %1 = record(B, %0): B(f64)
  ret(%1): B(f64)
}

fn ch() -> D(i32, void, void) {
#0:
  %0 = record(D, 0: i32): D(i32, void, void)
  ret(%0): D(i32, void, void)
}

fn j(%v: E(void, void, D(A(i32), void, void))) -> A(D(A(i32), void, void)) {
#0:
  %0 = getfield(%v, 1, 2): A(D(A(i32), void, void))
  ret(%0): A(D(A(i32), void, void))
}

fn g(%v: G(i32, void, [i32])) -> i32 {
#0:
  jmp(#1): void
#1:
  %0 = getfield(%v, 1): i32
  ret(%0): i32
}

fn k(%v: K) -> D(i32, i32, D(A(i32), void, void)) {
#0:
  %0 = getfield(%v, 1, 0): E(i32, i32, D(A(i32), void, void))
  %1 = getfield(%0, 1, 1): D(i32, i32, D(A(i32), void, void))
  ret(%1): D(i32, i32, D(A(i32), void, void))
}

fn h(%v: D(i32, void, void)) -> i32 {
#0:
  jmp(#1): void
#1:
  %0 = getfield(%v, 1): i32
  ret(%0): i32
}

fn a['0](%v: A('0)) -> A('0) {
#0:
  ret(%v): A('0)
}

fn i(%v: D(A(i32), void, void)) -> i32 {
#0:
  jmp(#2): void
#1:
  %1 = getfield(%0, 1): i32
  ret(%1): i32
#2:
  %0 = getfield(%v, 1): A(i32)
  jmp(#1): void
}

fn cd() -> D(i32, void, void) {
#0:
  %0 = record(D, 77: i32): D(i32, void, void)
  ret(%0): D(i32, void, void)
}

fn ce() -> E(i32, void, void) {
#0:
  %0 = call(cd): D(i32, void, void)
  nop(): void
  %2 = record(A, %1): A(void)
  %3 = tup(0: i32, %0, %2): {i32, D(i32, void, void), A(void)}
  %4 = record(E, %3): E(i32, void, void)
  ret(%4): E(i32, void, void)
}

fn l(%v: L(i32)) -> i32 {
#0:
  %0 = getfield(%v, 1, 1): D(i32, void, void)
  jmp(#1): void
#1:
  %1 = getfield(%0, 1): i32
  %3 = getfield(%v, 1, 0): B(i32)
  %4 = getfield(%3, 1, 0): i32
  %5 = mul(%4, %1): i32
  ret(%5): i32
}

fn cc() -> C(i32) {
#0:
  %0 = tup(5: i32, 6: i32, 0: i32): {i32, i32, i32}
  %1 = record(C, %0): C(i32)
  ret(%1): C(i32)
}

fn or(%lhs: i1, %rhs: i1) -> i1 {
#0:
  %0 = tup(%lhs, %rhs): {i1, i1}
  %1 = getfield(%0, 0): i1
  %2 = sext(%1): i32
  %3 = icmp(%2, 0: i32): i1
  je([%3, #1, #3]): void
#1:
  %5 = getfield(%0, 1): i1
  %6 = sext(%5): i32
  %7 = icmp(%6, 0: i32): i1
  je([%7, #2, #3]): void
#2:
  jmp(#4): void
#3:
  jmp(#4): void
#4:
  %11 = phi([0: i1, #2], [1: i1, #3]): i1
  ret(%11): i1
}

fn c['0](%v: C('0)) -> i32 {
#0:
  %0 = getfield(%v, 1, 2): i32
  ret(%0): i32
}

fn exists(%tree: IntTree, %value: i32) -> i1 {
#0:
  %0 = tup(%tree, %value): {IntTree, i32}
  %1 = getfield(%0, 0): IntTree
  %3 = getfield(%1, 0): i32
  %4 = icmp(%3, 0: i32): i1
  je([%4, #1, #2]): void
#1:
  %2 = getfield(%1, 1): i32
  %6 = getfield(%0, 1): i32
  %7 = icmp(%value, %2): i1
  jmp(#4): void
#2:
  %8 = getfield(%0, 0): IntTree
  jmp(#3): void
#3:
  %9 = getfield(%8, 2): {IntTree, IntTree}
  %10 = getfield(%9, 0): IntTree
  %11 = getfield(%9, 1): IntTree
  %13 = getfield(%0, 1): i32
  %14 = call(exists, %10, %value): i1
  %15 = call(exists, %11, %value): i1
  %16 = call(or, %14, %15): i1
  jmp(#4): void
#4:
  %19 = phi([%7, #1], [%16, #3]): i1
  ret(%19): i1
}

