
fn unit(%a: i32) -> i32 {
#0:
  ret(%a): i32
}

fn b(%a: i32, %b: i32) -> i32 {
#0:
  %0 = icmp(%a, %b): i1
  je([%0, #1, #2]): void
#1:
  jmp(#3): void
#2:
  jmp(#3): void
#3:
  %4 = phi([%a, #0], [%b, #0]): i32
  ret(%4): i32
}

fn c(%a: i32, %b: i32) -> i32 {
#0:
  %0 = alloc<mut>(): *i32
  store(%0, 0: i32): void
  %2 = icmp(%a, 0: i32): i1
  je([%2, #1, #2]): void
#1:
  store(%0, 1: i32): void
  jmp(#5): void
#2:
  %5 = icmp(%b, 0: i32): i1
  je([%5, #3, #4]): void
#3:
  store(%0, 2: i32): void
  jmp(#5): void
#4:
  store(%0, 3: i32): void
  jmp(#5): void
#5:
  %12 = load(%0): i32
  %13 = mul(%12, 2: i32): i32
  ret(%13): i32
}

fn a(%a: i32) -> i32 {
#0:
  %0 = icmp(%a, 0: i32): i1
  je([%0, #1, #2]): void
#1:
  %2 = call(unit, %a): i32
  ret(%2): i32
#2:
  %4 = sub(%a, 1: i32): i32
  %5 = call(unit, %4): i32
  ret(%5): i32
}

