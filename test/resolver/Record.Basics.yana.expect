
fn e(%v: *E) -> *E {
#0:
  ret(%v): *E
}

fn cl___() -> L {
#0:
  %0 = record(F): F
  %1 = record(G2): G
  %2 = tup(%0, %1): {F, G}
  %3 = record(L4, %2): L
  ret(%3): L
}

fn cf() -> F {
#0:
  %0 = record(F): F
  ret(%0): F
}

fn m_(%v: M_) -> i32 {
#0:
  %0 = getfield(%v, 0): i32
  %1 = icmp(%0, 0: i32): i1
  je([%1, #1, #2]): void
#1:
  jmp(#3): void
#2:
  jmp(#3): void
#3:
  %5 = phi([1: i32, #1], [0: i32, #2]): i32
  ret(%5): i32
}

fn d(%v: *D) -> i32 {
#0:
  %0 = loadfield(%v, 1, 0): i32
  ret(%0): i32
}

fn unit() -> void {
#0:
  nop(): void
  ret(): void
}

fn ca_() -> A {
#0:
  %0 = record(A, 16: i32): A
  ret(%0): A
}

fn cc__() -> C {
#0:
  %0 = tup(3: i32): {i32}
  %1 = record(C, %0): C
  ret(%1): C
}

fn b(%v: B) -> f32 {
#0:
  jmp(#1): void
#1:
  %0 = getfield(%v, 1): {i32, {f32, f32}}
  %1 = getfield(%0, 0): i32
  %2 = getfield(%0, 1): {f32, f32}
  %4 = getfield(%2, 1): f32
  ret(%4): f32
}

fn cj() -> J {
#0:
  %0 = call(ch): H
  jmp(#1): void
#1:
  %1 = getfield(%0, 1): i32
  %3 = tup(7: i32, 8: i32): {i32, i32}
  %4 = tup(%1, %3): {i32, {i32, i32}}
  %5 = record(J, %4): J
  ret(%5): J
}

fn cg_() -> G {
#0:
  %0 = record(G2): G
  ret(%0): G
}

fn ck_() -> K {
#0:
  %0 = record(K, 49: i32): K
  ret(%0): K
}

fn cf_() -> F {
#0:
  %0 = record(F): F
  ret(%0): F
}

fn g(%v: G) -> i32 {
#0:
  %0 = getfield(%v, 0): i32
  %1 = icmp(%0, 0: i32): i1
  je([%1, #1, #2]): void
#1:
  jmp(#5): void
#2:
  %3 = getfield(%v, 0): i32
  %4 = icmp(%3, 1: i32): i1
  je([%4, #3, #4]): void
#3:
  jmp(#5): void
#4:
  jmp(#5): void
#5:
  %9 = phi([0: i32, #1], [2: i32, #3], [4: i32, #4]): i32
  ret(%9): i32
}

fn k(%v: K) -> i32 {
#0:
  jmp(#1): void
#1:
  %0 = getfield(%v, 1): i32
  ret(%0): i32
}

fn h(%v: H) -> i32 {
#0:
  jmp(#1): void
#1:
  %0 = getfield(%v, 1): i32
  ret(%0): i32
}

fn a(%v: A) -> i32 {
#0:
  jmp(#1): void
#1:
  %0 = getfield(%v, 1): i32
  ret(%0): i32
}

fn cd_() -> D {
#0:
  %0 = tup(0: i32, 0: f32): {i32, f32}
  %1 = record(D, %0): D
  ret(%1): D
}

fn m(%v: M) -> i32 {
#0:
  %0 = getfield(%v, 0): i32
  %1 = icmp(%0, 0: i32): i1
  je([%1, #1, #2]): void
#1:
  jmp(#3): void
#2:
  jmp(#3): void
#3:
  %5 = phi([0: i32, #1], [1: i32, #2]): i32
  ret(%5): i32
}

fn l(%v: L) -> F {
#0:
  %3 = getfield(%v, 0): i32
  %4 = icmp(%3, 3: i32): i1
  je([%4, #1, #2]): void
#1:
  %0 = getfield(%v, 4): {F, G}
  %1 = getfield(%0, 0): F
  %2 = getfield(%0, 1): G
  jmp(#3): void
#2:
  %6 = record(F): F
  jmp(#3): void
#3:
  %9 = phi([%1, #1], [%6, #2]): F
  ret(%9): F
}

fn cb_() -> B {
#0:
  %0 = tup(1.2: f32, 1.3: f32): {f32, f32}
  %1 = tup(2: i32, %0): {i32, {f32, f32}}
  %2 = record(B, %1): B
  ret(%2): B
}

fn cm() -> M {
#0:
  %0 = record(M1): M
  ret(%0): M
}

fn ce_() -> E {
#0:
  %0 = record(E): E
  ret(%0): E
}

fn cl__() -> L {
#0:
  %0 = record(K, 0: i32): K
  %1 = record(L3, %0): L
  ret(%1): L
}

fn cl() -> L {
#0:
  %0 = record(L1, 24.2: f32): L
  ret(%0): L
}

fn cc_() -> C {
#0:
  %0 = tup(2: i32): {i32}
  %1 = record(C, %0): C
  ret(%1): C
}

fn ca() -> A {
#0:
  %0 = record(A, 25: i32): A
  ret(%0): A
}

fn cg() -> G {
#0:
  %0 = record(G1): G
  ret(%0): G
}

fn ck() -> K {
#0:
  %0 = record(K, 36: i32): K
  ret(%0): K
}

fn cb() -> B {
#0:
  %0 = tup(0: f32, 1.1: f32): {f32, f32}
  %1 = tup(2: i32, %0): {i32, {f32, f32}}
  %2 = record(B, %1): B
  ret(%2): B
}

fn ch() -> H {
#0:
  %0 = record(H, 0: i32): H
  ret(%0): H
}

fn j(%v: J) -> i32 {
#0:
  %0 = getfield(%v, 1, 1): {i32, i32}
  %1 = getfield(%0, 1): i32
  ret(%1): i32
}

fn cm_() -> M_ {
#0:
  %0 = record(M2): M_
  ret(%0): M_
}

fn i(%v: I) -> I {
#0:
  ret(%v): I
}

fn cd() -> D {
#0:
  %0 = tup(0: i32, 0: f32): {i32, f32}
  %1 = record(D, %0): D
  ret(%1): D
}

fn ce() -> E {
#0:
  %0 = record(E): E
  ret(%0): E
}

fn f(%v: F) -> F {
#0:
  ret(%v): F
}

fn cc() -> C {
#0:
  %0 = tup(1: i32): {i32}
  %1 = record(C, %0): C
  ret(%1): C
}

fn cd__() -> D {
#0:
  %0 = tup(0: i32, 0: f32): {i32, f32}
  %1 = record(D, %0): D
  ret(%1): D
}

fn cl_() -> L {
#0:
  %0 = record(L2, 0: i1): L
  ret(%0): L
}

fn c(%v: C) -> i32 {
#0:
  %0 = getfield(%v, 1, 0): i32
  ret(%0): i32
}

fn cg__() -> G {
#0:
  %0 = record(G3): G
  ret(%0): G
}

